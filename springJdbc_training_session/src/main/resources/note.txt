---------------------------------------------------------JDBC---------------------------------------------------------------
ORM - Object Relational Mapping ( Mapping of Java Class with table can be done with ORM, 
								  One of the popular ORM frameWork is Hibernate,
								  Every ORM framework is based on one API - JPA (Java Persistence API) )
	Table Employee
	Table Skills references eid
	
	@Java end
	class Employee{
		List<String> skills;
	}


The DBCP Component
	Many Apache projects support interaction with a relational database. 
	Creating a new connection for each user can be time consuming (often requiring multiple seconds of clock time), 
	in order to perform a database transaction that might take milliseconds. Opening a connection per user can be 
	unfeasible in a publicly-hosted Internet application where the number of simultaneous users can be very large. 
	Accordingly, developers often wish to share a "pool" of open connections between all of the application's current 
	users. The number of users actually performing a request at any given time is usually a very small percentage of 
	the total number of active users, and during request processing is the only time that a database connection is 
	required. The application itself logs into the DBMS, and handles any user account issues internally.



There are several Database Connection Pools already available, both within Apache products and elsewhere. 
This Commons package provides an opportunity to coordinate the efforts required to create and maintain an 
efficient, feature-rich package under the ASF license.
	The commons-dbcp2 artifact relies on code in the commons-pool2
	

When we are working with HIBERNATE at that time all your QUERIES will get gether with help of SESSIONFACTORY



---------------------------------------------------------------------------
When you create any database application you need to connected to database, so usually what happen when you work with any DB application
always action to the database should happen through a class format DATA ACCESS OBJECT (A class which is responsible to get connected to database is EmployeeDAO)
Apart from this you need to have a more class which is called as server which provide server(EmployeeService ---- is responsible to interact to the client)
All your SQL QUERIES will present in your DAO CLASS and all your Transcation in Employee service

A Class is which is responsible for interacting with Data Access Object will be known as a @Repository
A class which is responsible to work like a service layer is annotated with @Service 

If you are following MVC Architecture then :-
	A class which is responsible to service client is annotated as @Controller
	@Controller is for Spring MVC controllers in your presentation layer. 
	A @Controller typically would have a URL mapping and be triggered by a web request.